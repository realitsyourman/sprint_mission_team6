🇶 SQL에서 DDL과 DML의 차이점을 설명하고, 각각의 대표적인 명령어들의 용도를 설명하세요.
1. DDL (Data Definition Language)
DDL은 데이터베이스의 구조를 정의하거나 수정하는 데 사용되는 SQL 명령어다. 즉 데이터베이스, 테이블, 인덱스, 뷰 등 데이터베이스 객체의 정의를 관리하는 역할을 한다.
주요 DDL 명령어:
    CREATE: 데이터베이스, 테이블, 인덱스 등 새로운 객체를 생성한다.
        예: CREATE TABLE 테이블명 (컬럼1 타입, 컬럼2 타입, ...);
    ALTER: 기존의 데이터베이스 객체(예: 테이블)의 구조를 변경한다.
        예: ALTER TABLE 테이블명 ADD 컬럼명 데이터타입;
    DROP: 데이터베이스 객체를 삭제한다. 예를 들어, 테이블을 삭제할 때 사용된다.
        예: DROP TABLE 테이블명;
    TRUNCATE: 테이블의 모든 데이터를 삭제하지만 테이블 구조는 유지한다. (일반적으로 데이터 삭제가 빠르게 수행된다.)
        예: TRUNCATE TABLE 테이블명;
용도:
    데이터베이스 객체의 생성, 변경, 삭제 등을 통해 데이터베이스의 구조를 관리한다.
    예를 들어 CREATE 명령어로 새로운 테이블을 만들고 ALTER 명령어로 기존 테이블에 컬럼을 추가하거나 수정할 수 있다.

2. DML (Data Manipulation Language)
DML은 데이터베이스에 저장된 데이터를 조작하는 데 사용되는 SQL 명령어다. 데이터의 조회, 삽입, 수정, 삭제를 수행한다.
주요 DML 명령어:
    SELECT: 데이터베이스에서 데이터를 조회한다.
        예: SELECT * FROM 테이블명;
    INSERT: 데이터베이스에 새로운 데이터를 삽입한다.
        예: INSERT INTO 테이블명 (컬럼1, 컬럼2, ...) VALUES (값1, 값2, ...);
    UPDATE: 기존의 데이터를 수정한다.
        예: UPDATE 테이블명 SET 컬럼명 = 새값 WHERE 조건;
    DELETE: 데이터를 삭제한다.
        예: DELETE FROM 테이블명 WHERE 조건;
용도:
    데이터베이스에 저장된 데이터를 조회, 추가, 수정, 삭제하는 데 사용된다.
    예를 들어 INSERT 명령어로 새로운 레코드를 추가하고 UPDATE 명령어로 기존 데이터를 수정할 수 있다.
DDL과 DML의 주요 차이점
구분	DDL (Data Definition Language) /	DML (Data Manipulation Language)
용도	데이터베이스 구조 정의 및 변경 /	데이터베이스의 데이터 처리
주요 명령어	CREATE, ALTER, DROP, TRUNCATE /	SELECT, INSERT, UPDATE, DELETE
영향	테이블, 데이터베이스 객체의 구조를 변경	/ 테이블 내 데이터의 내용을 변경
커밋 여부	자동으로 커밋됨 (영구적 변화) /	명시적으로 커밋해야 영구적 반영

🇶 역정규화가 필요한 상황과 적용 시 고려해야 할 사항, 그리고 역정규화를 적용할 때의 장단점을 설명해주세요.
1. 역정규화가 필요한 상황
역정규화는 주로 다음과 같은 상황에서 필요하다.
    성능 향상이 필요할 때: 매우 복잡한 JOIN 연산이나 서브쿼리를 많이 사용하는 경우 역정규화를 통해 데이터를 미리 결합해 저장하면 성능이 개선될 수 있다. 특히 대용량 데이터베이스에서 자주 사용되는 쿼리의 속도를 빠르게 만들고자 할 때 유용하다.
    읽기 성능이 중요한 시스템: OLTP(Online Transaction Processing) 시스템보다는 OLAP(Online Analytical Processing) 시스템이나 데이터웨어하우스에서 자주 발생하는 경우 데이터 조회가 주요 작업이므로 역정규화가 필요할 수 있다.
    집계 및 요약 정보가 필요한 경우: 집계된 데이터나 요약된 정보를 자주 조회해야 하는 경우 이러한 데이터를 미리 저장해두면 조회 성능이 빨라진다. 예를 들어 매일의 판매량 합계나 평균 가격 등을 미리 계산하여 저장하는 경우가 있다.
    복잡한 쿼리 성능 저하: 정규화된 데이터에서는 여러 테이블을 조인해야 하므로 쿼리 성능이 저하될 수 있다. 이런 경우 일부 데이터를 중복 저장하여 조인 없이 빠르게 조회할 수 있도록 한다.

2. 역정규화를 적용할 때 고려해야 할 사항
역정규화를 적용할 때는 몇 가지 중요한 사항을 고려해야 한다.
    데이터 중복 문제: 역정규화를 하면 데이터 중복이 발생한다. 동일한 데이터가 여러 곳에 저장되므로 중복된 데이터를 업데이트할 때 모든 위치에서 갱신해야 한다. 이를 자동으로 처리하는 방법을 도입해야 하며, 그렇지 않으면 데이터 불일치 문제가 발생할 수 있다.
    데이터 일관성 유지: 데이터를 중복 저장함에 따라 일관성 유지를 위해 추가적인 관리가 필요하다. 예를 들어 트리거 또는 배치 작업을 통해 중복된 데이터가 변경될 때마다 모든 관련 테이블을 업데이트해야 한다.
    디스크 공간과 저장 비용: 데이터 중복이 발생하므로, 역정규화가 디스크 공간을 더 많이 차지하게 된다. 이에 따라 저장 비용이 증가할 수 있다.
    업데이트 성능: 데이터를 중복 저장하면 데이터 삽입, 수정, 삭제 작업에서 성능 저하가 발생할 수 있다. 이때는 애플리케이션 레벨에서 관리해야 할 사항이 많아질 수 있다.
    쿼리 성능: 역정규화의 주요 목적은 쿼리 성능을 향상시키는 것이다. 따라서 데이터 조회가 빈번하고 성능이 중요한 쿼리에서 역정규화를 적용해야 한다. 역정규화된 테이블은 보통 조회 성능을 높인다.

3. 역정규화를 적용할 때의 장단점
장점:
    조회 성능 향상: 데이터가 중복되어 저장되므로 복잡한 JOIN이나 서브쿼리를 줄일 수 있어 데이터 조회 속도가 빨라진다.
    복잡한 쿼리 최적화: 자주 사용되는 데이터를 미리 결합하여 저장하면 쿼리가 더 간단해지고 성능이 개선된다.
    집계 작업 최적화: 예를 들어 집계 함수(합계, 평균 등)가 자주 사용된다면 이러한 집계 데이터를 미리 계산해두어 성능을 높일 수 있다.

단점:
    데이터 중복과 불일치: 동일한 데이터가 여러 곳에 저장되므로 데이터를 수정할 때 모든 중복된 데이터를 갱신해야 한다. 갱신이 제대로 이루어지지 않으면 데이터 불일치가 발생할 수 있다.
    디스크 공간 낭비: 중복된 데이터가 저장되므로 저장 공간이 늘어나게 된다.
    데이터 일관성 문제: 데이터가 여러 곳에 중복 저장되기 때문에 데이터 일관성을 유지하는 데 추가적인 관리가 필요하다. 이는 추가적인 복잡성을 초래할 수 있다.
    유지보수 복잡도 증가: 데이터가 중복되므로 데이터를 변경하는 과정에서 많은 테이블을 동시에 수정해야 하는 경우가 생길 수 있다. 이는 유지보수를 복잡하게 만든다.
