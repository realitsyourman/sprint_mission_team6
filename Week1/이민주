Q1.

SOAP(Simple Object Access Protocol)
SOAP은 웹 서비스 간의 통신에 사용되는 프로토콜이며, XML 기반의 메시지 교환 프로토콜이다. SOAP는 원격 프로시저 호출(RPC)과 같은 방식으로 동작하여 네트워크 상에서 서로 다른 시스템 간에 데이터를 교환하는 데 사용된다. 
주요 특징은 다음과 같다.

1. XML 기반 메시지 포맷: SOAP 메시지는 텍스트 형식인 XML을 사용하여 데이터를 표현한다. XML은 플랫폼과 언어에 독립적이며, 데이터를 구조화하고 전송하는 데 효과적이다.
2. 메시지 구조: SOAP 메시지는 크게 두 부분으로 구성된다. 첫 번째는 헤더(Header) 부분으로, 메시지에 대한 부가적인 정보를 포함한다. 두 번째는 바디(Body) 부분으로, 실제 데이터가 포함되어 있다.
3. 프로토콜 중립성: SOAP는 다양한 프로토콜에 바인딩될 수 있다. 주로 HTTP, SMTP, TCP 등과 같은 프로토콜을 사용하여 웹 서비스를 구현하고, 웹 브라우저와 서버 간의 통신에도 사용될 수 있다.
4. 서비스 기술 설명: 웹 서비스의 기능과 메시지 교환에 대한 자세한 설명은 WSDL(Web Services Description Language)을 사용하여 정의됩니다. WSDL은 SOAP 기반 웹 서비스의 API를 기술하고 클라이언트가 서비스를 호출하는 데 필요한 정보를 제공한다.
5. 보안 기능: SOAP는 WS-Security와 같은 보안 기능을 내장하고 있어 웹 서비스 간의 통신을 보호하고 데이터의 안전성과 기밀성을 유지할 수 있다.
 
REST(Representational State Transfer)
REST는 웹 서비스의 아키텍처 스타일 중 하나로, 웹 리소스를 사용하여 클라이언트와 서버 간의 통신을 수행하는 방법을 규정한 아키텍처이며, 네트워크 상에서 분산 시스템과 웹 서비스를 구축하는 데 많이 사용되고 가장 널리 사용되는 웹 서비스 스타일 중 하나이다.
REST의 특징은 다음과 같다.

1. 리소스 중심 설계: REST는 서비스를 리소스(자원)의 집합으로 모델링한다. 각 리소스는 고유한 URI(Uniform Resource Identifier)를 갖고 있으며 이러한 리소스를 사용하여 클라이언트가 정보를 요청하거나 조작한다.
2. HTTP 메서드 활용: REST는 HTTP 프로토콜의 메서드(GET, POST, PUT, DELETE 등)를 사용하여 리소스를 조작한다. 간단한 CRUD(Create, Read, Update, Delete) 기능을 위해 HTTP 메서드를 활용한다.
  GET: 리소스를 조회하기 위해 사용됩니다.
  POST: 새로운 리소스를 생성하기 위해 사용됩니다.
  PUT: 기존 리소스를 업데이트(수정) 하기 위해 사용됩니다.
  DELETE: 리소스를 삭제하기 위해 사용됩니다.
3. 상태 없음(Statelessness): REST는 서버가 클라이언트의 상태를 유지하지 않는 상태 없는(stateless) 통신을 지향한다. 각 요청은 모두 독립적이며 이전 요청과 관련성이 없다.
4. 표현적 상태(Representational State): REST는 리소스의 상태를 표현하는 방식으로 데이터를 주고받는다. 주로 JSON(JavaScript Object Notation)이나 XML(Extended Markup Language)과 같은 경량의 데이터 형식을 사용한다.
5. 계층 구조: REST 아키텍처는 계층적 구조를 가질 수 있다. 이로 인해 서비스의 확장성과 유연성이 높아진다.

SOAP / REST의 차이점
SOAP :
- SOAP은 다양한 기업 시스템 간의 통합과 데이터 교환에 사용되며 분산 환경에서 신뢰성과 보안성을 강조하는 상황에서 적합한 웹 서비스 프로토콜로 널리 활용된다.
그러나 XML의 사용으로 인한 오버헤드와 복잡성 때문에 간단하고 가벼운 웹 서비스에는 REST와 같은 다른 프로토콜이 선호될 수도 있다.

REST : 
- REST의 간결함과 HTTP의 널리 사용되는 메서드를 활용하여 구현이 간단하고 가볍다. 이러한 특성으로 인해 REST는 현대적인 웹 서비스의 표준 아키텍처 스타일로 자리 잡았으며 웹 API, 모바일 애플리케이션, 분산 시스템 등 다양한 분야에서 널리 사용되고 있다.
단점으로는 SOAP에 비해 보안 기능이 덜 내장되어 있어 추가적인 보안 레이어를 구현해야 할 수도 있다. 또한 SOAP처럼 정해진 표준이 없어 구현 방식에 따라 일관성이 없을 수 있다.

결론적으로 SOAP은 보안과 트랜잭션 등의 기능을 위해 복잡한 프로토콜과 메시지를 사용하는 반면 REST는 단순하고 가벼운 HTTP 기반의 아키텍처로 대부분의 경우 REST가 더 널리 사용되고 있다. 

Q2.

1. HTTP 요청 수신
클라이언트가 HTTP 요청을 보내면 그 요청은 Spring Boot 애플리케이션의 웹 서버로 전달된다. 이 요청은 DispatcherServlet으로 넘어가게 된다.

2. DispatcherServlet 처리
DispatcherServlet은 요청을 처리할 메서드를 찾기 위해 핸들러 매핑을 사용한다. 요청에 맞는 @RestController 메서드를 찾아서 실행한다.

3. 핸들러 메서드 실행
@RestController의 적절한 메서드가 호출된다. 이 메서드는 HTTP 요청을 처리하고 처리 결과를 객체 형태로 반환한다.

4. HTTP 메시지 컨버터 동작
@RestController에서 반환한 객체는 HTTP 메시지 컨버터에 의해 변환된다. 예를 들어 객체를 JSON으로 변환하는 MappingJackson2HttpMessageConverter가 사용된다. 이때 객체는 HTTP 응답 본문으로 직렬화된다.

5. 응답 생성 및 반환
메시지 컨버터가 객체를 변환한 후 변환된 데이터는 HTTP 응답 본문에 포함되어 클라이언트에게 반환된다.

6. HTTP 응답 전송
변환된 응답은 클라이언트로 전송되고 클라이언트는 그 응답을 받아서 처리한다.

따라서 HTTP 메시지 컨버터는 핸들러 메서드가 반환한 객체를 HTTP 응답 본문으로 변환하는 역할을 하고 이 변환은 핸들러 메서드 실행 후에 이루어진다. 이 과정 덕분에 클라이언트와 서버 간의 데이터 전송이 원활하게 이루어진다.
